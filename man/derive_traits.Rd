% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/derive-traits.R
\name{derive_traits}
\alias{derive_traits}
\title{Calculate Derived Traits}
\usage{
derive_traits(exp, trait_fns = NULL, mp_fns = NULL)
}
\arguments{
\item{exp}{A \code{\link[glyexp:experiment]{glyexp::experiment()}} object. Before using this function,
you should preprocess the data using the \code{glyclean} package.
For glycoproteomics data, the data should be aggregated to the
"gfs" (glycoforms with structures) level using \code{glyclean::aggregate()}.
Also, please make sure that the \code{glycan_structure} column is present in the \code{var_info} table,
as not all glycoproteomics identification softwares provide this information.
"glycan_structure" can be a \code{glyrepr::glycan_structure()} vector,
or a character vector of glycan structure strings supported by \code{glyparse::auto_parse()}.}

\item{trait_fns}{A named list of derived trait functions created by trait factories.
Names of the list are the names of the derived traits.
Default is \code{NULL}, which means all derived traits in \code{\link[=basic_traits]{basic_traits()}} are calculated.}

\item{mp_fns}{A named list of meta-property functions.
This parameter is useful if your trait functions use custom meta-properties
other than those in \code{\link[=all_mp_fns]{all_mp_fns()}}.
Default is \code{NULL}, which means all meta-properties in \code{\link[=all_mp_fns]{all_mp_fns()}} are used.}
}
\value{
A new \code{\link[glyexp:experiment]{glyexp::experiment()}} object for derived traits.
Instead of "quantification of each glycan on each glycosite in each sample",
the new \code{experiment()} contains "the value of each derived trait on each glycosite in each sample",
with the following columns in the \code{var_info} table:
\itemize{
\item \code{variable}: variable ID
\item \code{trait}: derived trait name
}

For glycoproteomics data, with additional columns:
\itemize{
\item \code{protein}: protein ID
\item \code{protein_site}: the glycosite position on the protein
}

Other columns in the \code{var_info} table (e.g. \code{gene}) are retained if they have "many-to-one"
relationship with glycosites (unique combinations of \code{protein}, \code{protein_site}).
That is, each glycosite cannot have multiple values for these columns.
\code{gene} is a common example, as a glycosite can only be associate with one gene.
Descriptions about glycans are not such a column, as a glycosite can have multiple glycans,
thus having multiple descriptions.
Columns not having this relationship with glycosites will be dropped.
Don't worry if you cannot understand this logic,
as long as you know that this function will try its best to preserve useful information.

\code{sample_info} and \code{meta_data} are not modified,
except that the \code{exp_type} field of \code{meta_data} is set to "traitomics" for glycomics data,
and "traitproteomics" for glycoproteomics data.
}
\description{
This function calculates derived traits from glycomic or glycoproteomic profiles.
For glycomics data, it calculates the derived traits directly.
For glycoproteomics data, each glycosite is treated as a separate glycome,
and derived traits are calculated in a site-specific manner.

This function calculates derived traits from a \code{\link[glyexp:experiment]{glyexp::experiment()}} object.
}
\examples{
library(glyexp)
library(glyclean)

exp <- real_experiment |>
  auto_clean() |>
  slice_sample_var(n = 100)
trait_exp <- derive_traits(exp)
trait_exp

# By default, only basic traits are calculated
names(basic_traits())

# You can calculate all traits in `all_traits()`
more_trait_exp <- derive_traits(exp, trait_fns = all_traits())
more_trait_exp

}
\seealso{
\code{\link[=basic_traits]{basic_traits()}}, \code{\link[=all_traits]{all_traits()}}
}
