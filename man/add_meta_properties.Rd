% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meta-properties.R
\name{add_meta_properties}
\alias{add_meta_properties}
\title{Add Meta-Properties to Experiment}
\usage{
add_meta_properties(
  exp,
  mp_fns = NULL,
  struc_col = "glycan_structure",
  overwrite = FALSE
)
}
\arguments{
\item{exp}{An \code{\link[glyexp:experiment]{glyexp::experiment()}} object.}

\item{mp_fns}{A named list of meta-property functions.
Names of the list are the names of the meta-properties. Default is \code{\link[=all_mp_fns]{all_mp_fns()}}.
A meta-property function should takes a \code{glyrepr::glycan_structure()} vector,
and returns a vector of the meta-property values.
purrr-style lambda functions are supported.}

\item{struc_col}{The column name of the glycan structures in the variable information tibble.
Default is "glycan_structure".}

\item{overwrite}{Whether to overwrite the existing meta-property columns.
Default is FALSE, raising an error if the existing columns are found.}
}
\value{
An \code{\link[glyexp:experiment]{glyexp::experiment()}} object with meta-properties added to the variable information.
}
\description{
This function adds meta-properties to the variable information of a \code{\link[glyexp:experiment]{glyexp::experiment()}}.
Under the hood, it uses \code{\link[=get_meta_properties]{get_meta_properties()}} to calculate the meta-properties
on the "glycan_structure" column (or column specified by \code{struc_col}) of the variable information tibble,
and then adds the result back as new columns.
}
\examples{
library(glyexp)

# Compare the columns in the variable information before and after adding meta-properties
exp <- real_experiment  # a glycoproteomics experiment
colnames(get_var_info(exp))

exp2 <- add_meta_properties(exp)
colnames(get_var_info(exp2))

}
\seealso{
\code{\link[=get_meta_properties]{get_meta_properties()}}, \code{\link[glyexp:experiment]{glyexp::experiment()}}
}
