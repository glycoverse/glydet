[{"path":[]},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://glycoverse.github.io/glydet/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://glycoverse.github.io/glydet/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to glydet","title":"Contributing to glydet","text":"outlines propose change glydet. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://glycoverse.github.io/glydet/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to glydet","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://glycoverse.github.io/glydet/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to glydet","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://glycoverse.github.io/glydet/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to glydet","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"glycoverse/glydet\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://glycoverse.github.io/glydet/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to glydet","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://glycoverse.github.io/glydet/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to glydet","text":"Please note glydet project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://glycoverse.github.io/glydet/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 glydet authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glycoverse.github.io/glydet/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with glydet","title":"Getting help with glydet","text":"Thanks using glydet! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://glycoverse.github.io/glydet/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with glydet","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://glycoverse.github.io/glydet/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with glydet","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://glycoverse.github.io/glydet/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with glydet","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"custom-traits","dir":"Articles","previous_headings":"","what":"Custom Traits","title":"Defining Custom Traits","text":"glydet provides three trait factory functions creating custom derived traits: prop() calculating abundance proportion specific glycan subset ratio() computing abundance ratio two glycan subsets wmean() calculating weighted mean quantitative property, weighted glycan abundances derived traits glydet constructed using three factory functions. definitions built-traits demonstrate usage: TM: prop(Tp == \"highmannose\") TH: prop(Tp == \"hybrid\") TC: prop(Tp == \"complex\") MM: wmean(nM, within = (Tp == \"highmannose\")) CA2: prop(nA == 2, within = (Tp == \"complex\")) CA3: prop(nA == 3, within = (Tp == \"complex\")) CA4: prop(nA == 4, within = (Tp == \"complex\")) TF: prop(nF > 0) TFc: prop(nFc > 0) TFa: prop(nFa > 0) TB: prop(B) SG: wmean(nS / nG) GA: wmean(nG / nA) TS: prop(nS > 0) definitions utilize meta-properties building blocks. instance, T represents glycan type, nM denotes number mannose residues, forth. retrieve available built-meta-properties, use names(all_mp_fns()). complete list built-meta-properties provided : following sections provide detailed explanations factory function.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"prop","dir":"Articles","previous_headings":"Custom Traits > Trait Factories","what":"prop()","title":"Defining Custom Traits","text":"prop() creates proportion traits, represent common type derived traits. traits calculate relative abundance specific glycan subset within defined population. Examples include proportion core-fucosylated glycans within glycans, proportion tetra-antennary glycans within complex glycan subset. prop() accepts expression evaluates logical vector. built-custom meta-properties (covered later) can referenced within expression. example, proportion core-fucosylated glycans within glycans defined : Since nFc integer meta-property representing number core fucoses, expression nFc > 0 evaluates logical vector, creating valid trait definition. Consider simpler example: demonstrates straightforward trait definition. Since B (bisecting GlcNAc presence) already logical meta-property, prop(B) constitutes valid trait definition. complex example demonstrates compound logical operations: trait calculates proportion glycans containing sialic acid arm fucose. nS > 0 nFa > 0 represent logical expressions, combined using logical operator (&). R logical operator (including |, !, etc.) can utilized within expressions. Arithmetic calculations can also incorporated within expressions. example, CF trait defined : know nFc + nFa equivalent nF, definition equivalent : general principle, R expression evaluates logical vector valid use prop(). traits described calculate proportions relative entire glycan population. customize denominator (reference population), within parameter can employed. example, calculating proportion bi-antennary glycans within complex glycan subset (CA2) requires approach. within parameter accepts expression evaluates logical vector, following syntax primary parameter. CA2 trait defined follows: Note parentheses around Tp == \"complex\" optional. Consequently, alternative definition equally valid: Combining two parameters enables creation sophisticated trait definitions. instance, proportion sialylated glycans within subset core-fucosylated tetra-antennary glycans defined : mastered usage prop(), examine definitions built-proportion traits reinforce understanding. Practice exercises: Define trait calculating proportion glycans containing terminal galactose. Define trait calculating proportion glycans terminal galactose sialic acid. Define trait calculating proportion glycans exactly two antennae bisecting GlcNAc. Define trait calculating proportion glycans bisecting GlcNAc within bi-antennary glycan subset. Solutions provided end vignette.","code":"prop(nFc > 0) prop(B) prop(nS > 0 & nFa > 0) prop(nF > 0) prop(nFc + nFa > 0) prop(nA == 2, within = (Tp == \"complex\")) prop(nA == 2, within = Tp == \"complex\") prop(nS > 0, within = (nFc > 0 & nA == 4))"},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"ratio","dir":"Articles","previous_headings":"Custom Traits > Trait Factories","what":"ratio()","title":"Defining Custom Traits","text":"ratio() creates ratio traits represent quotient total abundances two glycan groups. Examples include ratio complex hybrid glycans, ratio bisecting non-bisecting glycans. ratio() accepts two expressions evaluate logical vectors, similar prop(). example, ratio complex hybrid glycans defined : first expression defines numerator, second expression defines denominator. within parameter can employed apply restrictions numerator denominator. example, ratio bisecting non-bisecting glycans within bi-antennary subset defined : represents syntactic sugar verbose: within parameter provides clearer semantics reduces redundancy. Note prop() represents special case ratio(), prop(cond, within) mathematically equivalent ratio(cond & within, within). following two definitions functionally identical: However, prop() recommended appropriate enhanced readability, provides intuitive semantics align natural language. prop() example can interpreted “proportion core-fucosylated glycans within complex glycans,” whereas ratio() version requires additional cognitive processing. Practice exercises: Define trait calculating ratio core-fucosylated non-core-fucosylated glycans. Define trait calculating ratio tetra-antennary tri-antennary glycans within complex glycan subset. Redefine CA2 trait using ratio().","code":"ratio(Tp == \"complex\", Tp == \"hybrid\") ratio(B, !B, within = (nA == 2)) ratio(B & (nA == 2), (!B) & (nA == 2)) # using prop() prop(nFc > 0, within = (Tp == \"complex\"))  # using ratio() ratio(nFc > 0 & Tp == \"complex\", Tp == \"complex\")"},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"wmean","dir":"Articles","previous_headings":"Custom Traits > Trait Factories","what":"wmean()","title":"Defining Custom Traits","text":"wmean() creates weighted-mean traits, represent sophisticated yet powerful type derived traits. traits calculate abundance-weighted average quantitative properties across glycan populations. Examples include average number antennae across glycans, average degree sialylation per galactose across entire glycan repertoire. exploring wmean() usage, essential understand weighted-mean concept. Consider three glycans: G1, G2, G3. respective antennae counts 1, 2, 3, relative abundances 50%, 20%, 30%. weighted-mean number antennae calculated : value represents abundance-weighted average degree branching across glycan population. concept provides substantial analytical power, enabling calculation numerous biologically meaningful traits. Consider another example: average degree sialylation per antenna across glycans. Using three glycans (G1, G2, G3) antennae counts 1, 2, 3, sialic acid counts 1, 1, 3, respectively, relative abundances 50%, 20%, 30%. First, calculate sialylation degree per antenna glycan (sialic acid count divided antenna count): Subsequently, incorporate abundance weighting: yields abundance-weighted average degree sialylation per antenna across glycan population. established weighted-mean concept mastered prop() ratio() fundamentals, can now examine wmean() implementation. wmean() accepts expressions evaluate numeric vectors, contrasting logical vectors required prop() ratio(). example, average number antennae across glycans defined : average degree sialylation per antenna across glycans defined : within parameter can utilized restrict weighted-mean calculation specific glycan subsets. example, average number antennae within complex glycans defined : Practice exercises: Define trait calculating average degree sialylation per antenna. Define trait calculating average number arm fucoses.","code":"(1 * 0.5 + 2 * 0.2 + 3 * 0.3) / (0.5 + 0.2 + 0.3) #> [1] 1.8 c(1/1, 1/2, 3/3) #> [1] 1.0 0.5 1.0 (1/1 * 0.5 + 1/2 * 0.2 + 3/3 * 0.3) / (0.5 + 0.2 + 0.3) #> [1] 0.9 wmean(nA) wmean(nS / nA) wmean(nA, within = (Tp == \"complex\"))"},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"using-custom-traits","dir":"Articles","previous_headings":"Custom Traits","what":"Using Custom Traits","title":"Defining Custom Traits","text":"learned define custom traits, can now implement . derive_traits() includes trait_fns parameter accepts named list derived trait functions. Note three factory functions described return functions output. R supports functional programming paradigms, treating functions first-class objects. Functions can passed arguments functions returned function calls. understanding concept enhances R proficiency, prerequisite usage—simply define traits named list provide trait_fns parameter. following example examines sialylation degree within glycan subsets varying antenna counts: identifiers “A2SG”, “A3SG”, “A4SG” represent derived trait names. trait_fns omitted, derive_traits() internally invokes basic_traits() utilize built-trait functions.","code":"class(prop(nFc > 0)) #> [1] \"glydet_prop\" my_traits <- list(   A2SG = wmean(nS / nA, within = (nA == 2)),   A3SG = wmean(nS / nA, within = (nA == 3)),   A4SG = wmean(nS / nA, within = (nA == 4)) ) derive_traits(exp, trait_fns = my_traits)"},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"validating-trait-definitions","dir":"Articles","previous_headings":"Custom Traits","what":"Validating Trait Definitions","title":"Defining Custom Traits","text":"can ensure trait definitions accurate meaningful? explain_trait() function provides intuitive way validate trait definitions generating human-readable explanations. function helps : Verify trait logic matches intended analysis Understand complex trait expressions glance Debug refine trait definitions deployment Let’s examine A2SG trait defined earlier example: function interprets trait expression returns clear, natural language description trait calculates. validation step particularly valuable working complex trait definitions collaborating team members need understand analytical approach.","code":"explain_trait(wmean(nS / nA, within = (nA == 2))) #> [1] \"Abundance-weighted mean of degree of sialylation per antenna within bi-antennary glycans.\""},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"custom-meta-properties","dir":"Articles","previous_headings":"","what":"Custom Meta-Properties","title":"Defining Custom Traits","text":"preceding examples utilized exclusively built-meta-properties. building blocks derived traits, understanding define custom meta-properties bring flexibility. glydet provides two means defining custom meta-properties: providing meta-property functions mp_fns parameter derive_traits(). using columns variable information tibble meta-properties.","code":""},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"defining-custom-meta-properties-with-functions","dir":"Articles","previous_headings":"Custom Meta-Properties","what":"Defining Custom Meta-Properties with Functions","title":"Defining Custom Traits","text":"Meta-property functions must accept glyrepr::glycan_structure() vector return vector corresponding meta-property values. example, built-meta-property B defined follows: implementation utilizes glymotif::have_motif() determine motif presence within glycan structures. Meta-property function definitions offer considerable flexibility. tools glycoverse ecosystem broader R environment can employed, provided function accepts glyrepr::glycan_structure() vector returns atomic vector. built-meta-properties utilize glymotif package motif matching counting operations. detailed information, consult glymotif documentation. following example demonstrates custom meta-property creation: Note purrr-style lambda functions provide concise syntax meta-property function definitions. Traits can defined using new meta-properties: expressions incorporate custom meta-properties (nLe nPl) built-meta-property nA. Implementation custom meta-properties traits proceeds follows: Ensure custom meta-properties combined built-meta-properties latter required within trait expressions. Let’s see another example sialic acid linkage types. Neu5Ac can two different linkage types: a2-3 a2-6. can define two custom meta-properties count number sialic acids linkage type: define two traits calculate degree a2-3 a2-6 sialylation per galactose: calculate traits: example can violate ambiguity assumption built-meta-properties derived traits, introducing sophisticated linkage-awared meta-properties.","code":"# Simplified version for illustration purposes function(glycans) {   motif <- \"HexNAc(??-?)Hex(??-?)HexNAc(??-?)HexNAc(??-\"   glymotif::have_motif(glycans, motif, alignment = \"core\") } my_mp_fns <- list(   # Number of Lewis antigens   nLe = ~ glymotif::count_motif(.x, \"Hex(??-?)[dHex(??-?)]HexNAc(??-\"),   # Number of poly-LacNAc units   nPl = ~ glymotif::count_motif(.x, \"Hex(??-?)HexNAc(??-?)Hex(??-?)HexNAc(??-\") ) my_traits <- list(   # Average number of Lewis antigens per antenna   LeA = wmean(nLe / nA),   # Average number of poly-LacNAc units per glycan   Pl = wmean(nPl) ) derive_traits(exp, trait_fns = my_traits, mp_fns = c(my_mp_fns, all_mp_fns())) #>  #> ── Traitproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 548 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr> sia_mp_fns <- list(   # Number of a2-3 sialic acids   nL = ~ glymotif::count_motif(.x, \"NeuAc(a2-3)Hex(??-\"),   # Number of a2-6 sialic acids   nE = ~ glymotif::count_motif(.x, \"NeuAc(a2-6)Hex(??-\") ) sia_traits <- list(   # Average degree of a2-3 sialylation per galactose   LG = wmean(nL / nG),   # Average degree of a2-6 sialylation per galactose   EG = wmean(nE / nG) ) derive_traits(exp, trait_fns = sia_traits, mp_fns = c(sia_mp_fns, all_mp_fns())) #>  #> ── Traitproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 548 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr>"},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"defining-custom-meta-properties-with-columns","dir":"Articles","previous_headings":"Custom Meta-Properties","what":"Defining Custom Meta-Properties with Columns","title":"Defining Custom Traits","text":"first method handy information need already encoded glycan structures. However, situations need rely meta-data. case, can use columns variable information tibble meta-properties directly, specifying mp_cols parameter. example, let’s use sialic acid linkage type example . might used special derivatization methods differentiate two linkage types. information might end column variable information tibble, directly glycan structures. See? linkage information sialic acids glycan structures. two columns: n_a26_sia n_a23_sia storing information. Now can define two traits calculate degree a2-3 a2-6 sialylation per galactose: use mp_cols tell derive_traits() use columns meta-properties:","code":"# Here we assume all sialic acids are a2-6 exp2 <- exp |>   mutate_var(     n_a26_sia = count_mono(glycan_structure, \"NeuAc\"),     n_a23_sia = 0L   ) exp2 |>   get_var_info() |>   filter(n_a26_sia > 0) |>   pull(glycan_structure) #> <glycan_structure[2526]> #> [1] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [2] NeuAc(??-?)Hex(??-?)HexNAc(??-?)[HexNAc(??-?)]Hex(??-?)[Hex(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [3] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [4] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [5] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [6] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)[dHex(??-?)]HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [7] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)[dHex(??-?)]HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [8] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> [9] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??- #> [10] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> ... (2516 more not shown) #> # Unique structures: 526 sia_traits <- list(   # Average degree of a2-3 sialylation per galactose   LG = wmean(nL / nG),   # Average degree of a2-6 sialylation per galactose   EG = wmean(nE / nG) ) derive_traits(exp2, trait_fns = sia_traits, mp_cols = c(nL = \"n_a23_sia\", nE = \"n_a26_sia\")) #>  #> ── Traitproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 548 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr>, n_a23_sia <int>"},{"path":"https://glycoverse.github.io/glydet/articles/custom-traits.html","id":"exercise-solutions","dir":"Articles","previous_headings":"","what":"Exercise Solutions","title":"Defining Custom Traits","text":"prop() prop(nGt > 0) prop(nGt > 0 & nS == 0) prop(nA == 2 & !B) prop(B, within = (nA == 2)) ratio() ratio(nFc > 0, nFc == 0) ratio(nA == 4, nA == 3, within = (Tp == \"complex\")) ratio(nA == 2 & Tp == \"complex\", Tp == \"complex\") wmean() wmean(nS / nA) wmean(nFa)","code":""},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"dive-right-in-your-first-analysis","dir":"Articles","previous_headings":"","what":"🎯 Dive Right In: Your First Analysis","title":"Get Started with glydet","text":"Ready see glydet action? Let’s jump straight real-world example demonstrates power! ’ll work glyexp::real_experiment — authentic N-glycoproteomics dataset 12 patients varying liver conditions. ⚠️ Pro tip: Always preprocess data glyclean diving trait analysis. ensures results clean reliable data! Let’s take quick peek dataset understand ’re working : Now magic moment ✨—let’s calculate derived traits! Voilà! see brand new experiment() object “traitomics” type. Think original dataset’s sophisticated cousin 🎭 — instead tracking “quantification glycan glycosite sample,” now contains “value derived trait glycosite sample.” 🎉 Congratulations! ’ve just calculated comprehensive suite derived traits site-specific manner: TM: Proportion high-mannose glycans TH: Proportion hybrid glycans TC: Proportion complex glycans MM: Average number mannoses within high-mannose glycans CA2: Proportion bi-antennary glycans within complex glycans CA3: Proportion tri-antennary glycans within complex glycans CA4: Proportion tetra-antennary glycans within complex glycans TF: Proportion fucosylated glycans TFc: Proportion core-fucosylated glycans TFa: Proportion arm-fucosylated glycans TB: Proportion glycans bisecting GlcNAc SG: Average degree sialylation per galactose GA: Average degree galactosylation per antenna TS: Proportion sialylated glycans 💡 key insight: treat glycans glycosite separate mini-glycome, calculate derived traits one across samples. instance, particular glycosite hosts 10 different glycans, TFc value represents proportion core-fucosylated glycans within 10 structures sample. Now comes fun part! 📊 can leverage powerful functions glystats package analyze derived traits. Let’s demonstrate ANOVA analysis identify glycosites significantly different levels core-fucosylation across conditions: 🔍 Discovery time! ’ve identified several glycosites statistically significant differences core-fucosylation levels across patient groups — exactly kind biological insights make derived traits powerful!","code":"exp <- auto_clean(real_experiment)  # Preprocess the data #> ℹ Normalizing data (Median) #> ✔ Normalizing data (Median) [137ms] #>  #> ℹ Removing variables with >50% missing values #> ✔ Removing variables with >50% missing values [74ms] #>  #> ℹ Imputing missing values #> ℹ Sample size <= 30, using sample minimum imputation #> ℹ Imputing missing values✔ Imputing missing values [24ms] #>  #> ℹ Aggregating data #> ✔ Aggregating data [868ms] #>  #> ℹ Normalizing data again #> ✔ Normalizing data again [17ms] exp #>  #> ── Glycoproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 3880 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, gene <chr>, glycan_composition <comp>, glycan_structure <struct>, protein_site <int> get_var_info(exp) #> # A tibble: 3,880 × 6 #>    variable protein gene     glycan_composition      #>    <chr>    <chr>   <chr>    <comp>                  #>  1 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  2 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #>  3 V3       P04196  HRG      Hex(5)HexNAc(4)         #>  4 V4       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #>  5 V5       P10909  CLU      Hex(6)HexNAc(5)         #>  6 V6       P04196  HRG      Hex(5)HexNAc(4)NeuAc(2) #>  7 V7       P04196  HRG      Hex(5)HexNAc(4)         #>  8 V8       P04196  HRG      Hex(5)HexNAc(4)dHex(2)  #>  9 V9       P04196  HRG      Hex(4)HexNAc(3)         #> 10 V10      P04196  HRG      Hex(4)HexNAc(4)NeuAc(1) #> # ℹ 3,870 more rows #> # ℹ 2 more variables: glycan_structure <struct>, protein_site <int> get_sample_info(exp) #> # A tibble: 12 × 2 #>    sample group #>    <chr>  <chr> #>  1 C1     C     #>  2 C2     C     #>  3 C3     C     #>  4 H1     H     #>  5 H2     H     #>  6 H3     H     #>  7 M1     M     #>  8 M2     M     #>  9 M3     M     #> 10 Y1     Y     #> 11 Y2     Y     #> 12 Y3     Y get_expr_mat(exp)[1:5, 1:5] #>              C1           C2           C3           H1           H2 #> V1 6.626760e+03 2.019159e+04      13432.7 4.072473e+04 1.771879e+04 #> V2 3.744595e+08 5.691652e+08   99531624.5 2.372164e+04 1.422307e+07 #> V3 5.260619e+08 5.644547e+08  211645556.7 9.149818e+08 8.534716e+08 #> V4 2.983928e+09 2.665752e+09 1207235166.5 3.410355e+09 3.918161e+09 #> V5 2.751569e+07 3.200443e+07    8055532.6 6.765746e+07 4.546455e+07 trait_exp <- derive_traits(exp) trait_exp #>  #> ── Traitproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 3836 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr> get_var_info(trait_exp) #> # A tibble: 3,836 × 5 #>    variable protein protein_site trait gene  #>    <chr>    <chr>          <int> <chr> <chr> #>  1 V1       A6NJW9            49 TM    CD8B2 #>  2 V2       A6NJW9            49 TH    CD8B2 #>  3 V3       A6NJW9            49 TC    CD8B2 #>  4 V4       A6NJW9            49 MM    CD8B2 #>  5 V5       A6NJW9            49 CA2   CD8B2 #>  6 V6       A6NJW9            49 CA3   CD8B2 #>  7 V7       A6NJW9            49 CA4   CD8B2 #>  8 V8       A6NJW9            49 TF    CD8B2 #>  9 V9       A6NJW9            49 TFc   CD8B2 #> 10 V10      A6NJW9            49 TFa   CD8B2 #> # ℹ 3,826 more rows # These are the trait values! get_expr_mat(trait_exp)[1:5, 1:5] #>    C1 C2 C3 H1 H2 #> V1  0  0  0  0  0 #> V2  0  0  0  0  0 #> V3  1  1  1  1  1 #> V4 NA NA NA NA NA #> V5  1  1  1  1  1 anova_res <- gly_anova(trait_exp) #> ℹ Number of groups: 4 #> ℹ Groups: \"C\", \"H\", \"M\", and \"Y\" #> Warning: 267 variables failed to fit the model anova_res$tidy_result$main_test |>   dplyr::filter(trait == \"TFc\", p_adj < 0.05) #> # A tibble: 12 × 13 #>    variable protein protein_site trait gene   term     df     sumsq    meansq #>    <chr>    <chr>          <int> <chr> <chr>  <chr> <dbl>     <dbl>     <dbl> #>  1 V457     P00748           249 TFc   F12    group     3 0.000548  0.000183  #>  2 V709     P01591            71 TFc   JCHAIN group     3 0.0771    0.0257    #>  3 V919     P02679            78 TFc   FGG    group     3 0.00365   0.00122   #>  4 V1115    P02765           176 TFc   AHSG   group     3 0.0000941 0.0000314 #>  5 V1227    P02790           240 TFc   HPX    group     3 0.0629    0.0210    #>  6 V1353    P03952           494 TFc   KLKB1  group     3 0.00231   0.000770  #>  7 V1381    P04004            86 TFc   VTN    group     3 0.00640   0.00213   #>  8 V1661    P04278           396 TFc   SHBG   group     3 0.0299    0.00998   #>  9 V1675    P05090            98 TFc   APOD   group     3 0.0174    0.00581   #> 10 V2165    P0C0L4          1328 TFc   C4A    group     3 0.0174    0.00581   #> 11 V2487    P19652           103 TFc   ORM2   group     3 0.0644    0.0215    #> 12 V2837    P43652            33 TFc   AFM    group     3 0.00547   0.00182   #> # ℹ 4 more variables: statistic <dbl>, p_value <dbl>, p_adj <dbl>, #> #   post_hoc <chr>"},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"under-the-hood-understanding-meta-properties","dir":"Articles","previous_headings":"","what":"🔧 Under the Hood: Understanding Meta-Properties","title":"Get Started with glydet","text":"Curious magic happens? Let’s lift hood explore glydet’s inner workings—don’t worry, ’ll keep things accessible! key concept need understand “meta-properties” - think molecular fingerprints individual glycans. 🆚 ’s difference? Derived traits describe entire glycomes (glycans glycosite) values fluctuate across samples Meta-properties describe individual glycans regardless abundance — like counting antennae,core fucoses, sialic acids single structure 🧠 connection: Meta-properties building blocks derived traits. call derive_traits(), glydet automatically calculates meta-properties glycans first, uses information compute derived traits see. Want work meta-properties directly? 🛠️ ’re luck! glydet provides two handy functions: get_meta_properties(): Calculate meta-properties set glycans add_meta_properties(): Enrich experiment() object adding meta-properties variable information","code":""},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"get_meta_properties","dir":"Articles","previous_headings":"🔧 Under the Hood: Understanding Meta-Properties","what":"🔬 get_meta_properties()","title":"Get Started with glydet","text":"Let’s see get_meta_properties() action! ’ll extract glycan structures dataset: 📝 Note: glycans glyrepr::glycan_structure() vector—standardized representations glycan structures. Now watch magic happen calculate meta-properties:","code":"glycans <- unique(get_var_info(exp)$glycan_structure)[1:5] glycans #> <glycan_structure[5]> #> [1] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [2] NeuAc(??-?)Hex(??-?)HexNAc(??-?)[HexNAc(??-?)]Hex(??-?)[Hex(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [3] Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [4] NeuAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> [5] Hex(??-?)HexNAc(??-?)Hex(??-?)HexNAc(??-?)Hex(??-?)[Hex(??-?)HexNAc(??-?)Hex(??-?)]Hex(??-?)HexNAc(??-?)HexNAc(??- #> # Unique structures: 5 get_meta_properties(glycans) #> # A tibble: 5 × 10 #>   Tp      B        nA    nF   nFc   nFa    nG   nGt    nS    nM #>   <fct>   <lgl> <int> <int> <int> <int> <int> <int> <int> <int> #> 1 complex FALSE     2     0     0     0     2     0     2     3 #> 2 hybrid  FALSE     2     0     0     0     1     0     1     4 #> 3 complex FALSE     2     0     0     0     2     2     0     3 #> 4 complex FALSE     2     0     0     0     2     1     1     3 #> 5 complex FALSE     2     0     0     0     2     1     0     4"},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"add_meta_properties","dir":"Articles","previous_headings":"🔧 Under the Hood: Understanding Meta-Properties","what":"📈 add_meta_properties()","title":"Get Started with glydet","text":"Working glyexp::experiment() objects? Perfect! can supercharge variable information adding meta-properties directly: ✨ Look transformation! variable information now enriched multiple meta-property columns. opens powerful filtering possibilities based structural features. instance, let’s filter glycoforms containing high-mannose glycans:","code":"exp_with_mp <- add_meta_properties(exp) get_var_info(exp_with_mp) #> # A tibble: 3,880 × 16 #>    variable protein gene     glycan_composition      #>    <chr>    <chr>   <chr>    <comp>                  #>  1 V1       P08185  SERPINA6 Hex(5)HexNAc(4)NeuAc(2) #>  2 V2       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #>  3 V3       P04196  HRG      Hex(5)HexNAc(4)         #>  4 V4       P04196  HRG      Hex(5)HexNAc(4)NeuAc(1) #>  5 V5       P10909  CLU      Hex(6)HexNAc(5)         #>  6 V6       P04196  HRG      Hex(5)HexNAc(4)NeuAc(2) #>  7 V7       P04196  HRG      Hex(5)HexNAc(4)         #>  8 V8       P04196  HRG      Hex(5)HexNAc(4)dHex(2)  #>  9 V9       P04196  HRG      Hex(4)HexNAc(3)         #> 10 V10      P04196  HRG      Hex(4)HexNAc(4)NeuAc(1) #> # ℹ 3,870 more rows #> # ℹ 12 more variables: glycan_structure <struct>, protein_site <int>, Tp <fct>, #> #   B <lgl>, nA <int>, nF <int>, nFc <int>, nFa <int>, nG <int>, nGt <int>, #> #   nS <int>, nM <int> exp_with_mp |>   filter_var(Tp == \"highmannose\") #>  #> ── Glycoproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 207 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, gene <chr>, glycan_composition <comp>, glycan_structure <struct>, protein_site <int>, Tp <fct>, B <lgl>, nA <int>, nF <int>, nFc <int>, nFa <int>, nG <int>, nGt <int>, nS <int>, nM <int>"},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"meta-property-functions-your-structural-toolkit","dir":"Articles","previous_headings":"🔧 Under the Hood: Understanding Meta-Properties","what":"🧰 Meta-Property Functions: Your Structural Toolkit","title":"Get Started with glydet","text":"Behind scenes, meta-properties actually functions take glyrepr::glycan_structure() vectors return corresponding property values. glydet comes packed comprehensive library built-meta-property functions: 📚 complete toolkit: ’s full roster built-meta-property functions: function can called directly quick structural analysis:","code":"names(all_mp_fns()) #>  [1] \"Tp\"  \"B\"   \"nA\"  \"nF\"  \"nFc\" \"nFa\" \"nG\"  \"nGt\" \"nS\"  \"nM\" n_glycan_type(glycans) #> [1] complex hybrid  complex complex complex #> Levels: paucimannose hybrid highmannose complex"},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"working-with-structural-ambiguity","dir":"Articles","previous_headings":"","what":"🧩 Working with Structural Ambiguity","title":"Get Started with glydet","text":"important design principle glydet ability handle glycan structures varying levels detail. built-meta-properties derived traits designed work minimum information typically available N-glycans experimental scenarios.","code":""},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"generic-vs--specific-monosaccharides","dir":"Articles","previous_headings":"🧩 Working with Structural Ambiguity","what":"🔧 Generic vs. Specific Monosaccharides","title":"Get Started with glydet","text":"glydet works seamlessly generic monosaccharide names (e.g., “Hex”, “HexNAc”, “dHex”) structures lacking linkage information. level structural resolution reflects commonly achievable glycoproteomics workflows, complete structural determination often challenging. example, ambiguous structure works perfectly:","code":"# Generic monosaccharides with unknown linkages ❓ ambiguous_glycan <- \"HexNAc(??-?)Hex(??-?)[Hex(??-?)]Hex(??-?)HexNAc(??-?)[dHex(??-?)]HexNAc(??-\""},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"handling-detailed-structures","dir":"Articles","previous_headings":"🧩 Working with Structural Ambiguity","what":"✨ Handling Detailed Structures","title":"Get Started with glydet","text":"design philosophy doesn’t limit glydet’s applicability well-characterized structures. package equally handles glycans complete structural information:","code":"# Fully specified structure with specific monosaccharides and linkages ✅ detailed_glycan <- \"GlcNAc(b1-2)Man(a1-3)[Man(a1-6)]Man(b1-3)GlcNAc(b1-4)[Fuc(a1-6)]GlcNAc(b1-\""},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"extending-functionality","dir":"Articles","previous_headings":"🧩 Working with Structural Ambiguity","what":"🚀 Extending Functionality","title":"Get Started with glydet","text":"working highly detailed structural information, may want create specialized meta-property functions leverage specific monosaccharide identities linkage patterns. allows define custom derived traits capture structural features beyond generic framework provided built-functions.","code":""},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"working-with-glycomics-data","dir":"Articles","previous_headings":"","what":"Working with Glycomics Data","title":"Get Started with glydet","text":"Working glycomics data difference working glycoproteomics data, even straightforward resulting experiment() simpler structure. briefly demonstrate work glycomics data using glyexp::real_experiment2.","code":"exp <- auto_clean(real_experiment2) #> ℹ Normalizing data (Median Quotient) #> ✔ Normalizing data (Median Quotient) [15ms] #>  #> ℹ Removing variables with >50% missing values #> ✔ Removing variables with >50% missing values [14ms] #>  #> ℹ Imputing missing values #> ℹ Sample size > 100, using MissForest imputation #> ℹ Imputing missing values✔ Imputing missing values [15.8s] #>  #> ℹ Normalizing data (Total Area) #> ✔ Normalizing data (Total Area) [13ms] trait_exp <- derive_traits(exp) trait_exp #>  #> ── Traitomics Experiment ─────────────────────────────────────────────────────── #> ℹ Expression matrix: 144 samples, 14 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: trait <chr>"},{"path":"https://glycoverse.github.io/glydet/articles/glydet.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s Next?","title":"Get Started with glydet","text":"Now good understanding glydet use . can try all_traits() calculate advanced detailed derived traits. can also start define meta-property functions derived traits. Check Custom Traits vignette learn define derived traits.","code":""},{"path":"https://glycoverse.github.io/glydet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bin Fu. Author, maintainer.","code":""},{"path":"https://glycoverse.github.io/glydet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu B (2025). glydet: Describe Glycosylation Structural Properties Site Specific Manner. R package version 0.5.0, https://glycoverse.github.io/glydet/.","code":"@Manual{,   title = {glydet: Describe Glycosylation Structural Properties in a Site Specific Manner},   author = {Bin Fu},   year = {2025},   note = {R package version 0.5.0},   url = {https://glycoverse.github.io/glydet/}, }"},{"path":"https://glycoverse.github.io/glydet/index.html","id":"glydet-","dir":"","previous_headings":"","what":"Describe Glycosylation Structural Properties in a Site Specific Manner","title":"Describe Glycosylation Structural Properties in a Site Specific Manner","text":"goal glydet describe glycosylation structural properties site specific manner. field glycomics, analytical approach known derived traits. glydet provides functions calculate derived traits well-defined literature, implements domain-specific language define custom derived traits.","code":""},{"path":"https://glycoverse.github.io/glydet/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Describe Glycosylation Structural Properties in a Site Specific Manner","text":"can install latest release glydet GitHub : install development version:","code":"# install.packages(\"remotes\") remotes::install_github(\"glycoverse/glydet@*release\") remotes::install_github(\"glycoverse/glydet\")"},{"path":"https://glycoverse.github.io/glydet/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Describe Glycosylation Structural Properties in a Site Specific Manner","text":"🚀 Get started: 🔧 Custom derived traits: 📚 Reference: ","code":""},{"path":"https://glycoverse.github.io/glydet/index.html","id":"role-in-glycoverse","dir":"","previous_headings":"","what":"Role in glycoverse","title":"Describe Glycosylation Structural Properties in a Site Specific Manner","text":"glydet high-level package glycoverse ecosystem. designed used glycomics glycoproteomics researchers directly calculate derived traits. built top many packages glycoverse ecosystem, including glyexp, glyrepr, glyparse, glymotif.","code":""},{"path":"https://glycoverse.github.io/glydet/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Describe Glycosylation Structural Properties in a Site Specific Manner","text":"First, let’s load necessary packages get data ready. Now, let’s calculate derived traits! Voilà! see brand new experiment() object “traitomics” type. Think original dataset’s sophisticated cousin 🎭 — instead tracking “quantification glycan glycosite sample,” now contains “value derived trait glycosite sample.”","code":"library(glyexp) library(glyclean) #>  #> Attaching package: 'glyclean' #> The following object is masked from 'package:stats': #>  #>     aggregate library(glydet)  exp <- auto_clean(real_experiment) #> ℹ Normalizing data (Median) #> ✔ Normalizing data (Median) [71ms] #>  #> ℹ Removing variables with >50% missing values #> ✔ Removing variables with >50% missing values [38ms] #>  #> ℹ Imputing missing values #> ℹ Sample size <= 30, using sample minimum imputation #> ℹ Imputing missing values✔ Imputing missing values [10ms] #>  #> ℹ Aggregating data #> ✔ Aggregating data [349ms] #>  #> ℹ Normalizing data again #> ✔ Normalizing data again [7ms] exp #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 3880 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, gene <chr>, glycan_composition <glyrpr_c>, glycan_structure <glyrpr_s>, protein_site <int> trait_exp <- derive_traits(exp) trait_exp #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 3836 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr> get_var_info(trait_exp) #> # A tibble: 3,836 × 5 #>    variable protein protein_site trait gene  #>    <chr>    <chr>          <int> <chr> <chr> #>  1 V1       A6NJW9            49 TM    CD8B2 #>  2 V2       A6NJW9            49 TH    CD8B2 #>  3 V3       A6NJW9            49 TC    CD8B2 #>  4 V4       A6NJW9            49 MM    CD8B2 #>  5 V5       A6NJW9            49 CA2   CD8B2 #>  6 V6       A6NJW9            49 CA3   CD8B2 #>  7 V7       A6NJW9            49 CA4   CD8B2 #>  8 V8       A6NJW9            49 TF    CD8B2 #>  9 V9       A6NJW9            49 TFc   CD8B2 #> 10 V10      A6NJW9            49 TFa   CD8B2 #> # ℹ 3,826 more rows get_expr_mat(trait_exp)[1:5, 1:5] #>    C1 C2 C3 H1 H2 #> V1  0  0  0  0  0 #> V2  0  0  0  0  0 #> V3  1  1  1  1  1 #> V4 NA NA NA NA NA #> V5  1  1  1  1  1"},{"path":"https://glycoverse.github.io/glydet/reference/add_meta_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Meta-Properties to Experiment — add_meta_properties","title":"Add Meta-Properties to Experiment — add_meta_properties","text":"function adds meta-properties variable information glyexp::experiment(). hood, uses get_meta_properties() calculate meta-properties \"glycan_structure\" column (column specified struc_col) variable information tibble, adds result back new columns.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/add_meta_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Meta-Properties to Experiment — add_meta_properties","text":"","code":"add_meta_properties(   exp,   mp_fns = NULL,   struc_col = \"glycan_structure\",   overwrite = FALSE )"},{"path":"https://glycoverse.github.io/glydet/reference/add_meta_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Meta-Properties to Experiment — add_meta_properties","text":"exp glyexp::experiment() object. mp_fns named list meta-property functions. Names list names meta-properties. Default all_mp_fns(). meta-property function takes glyrepr::glycan_structure() vector, returns vector meta-property values. purrr-style lambda functions supported. struc_col column name glycan structures variable information tibble. Default \"glycan_structure\". overwrite Whether overwrite existing meta-property columns. Default FALSE, raising error existing columns found.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/add_meta_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Meta-Properties to Experiment — add_meta_properties","text":"glyexp::experiment() object meta-properties added variable information.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/reference/add_meta_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Meta-Properties to Experiment — add_meta_properties","text":"","code":"library(glyexp)  # Compare the columns in the variable information before and after adding meta-properties exp <- real_experiment |>   slice_sample_var(n = 10) colnames(get_var_info(exp)) #> [1] \"variable\"           \"peptide\"            \"peptide_site\"       #> [4] \"protein\"            \"protein_site\"       \"gene\"               #> [7] \"glycan_composition\" \"glycan_structure\"    exp2 <- add_meta_properties(exp) colnames(get_var_info(exp2)) #>  [1] \"variable\"           \"peptide\"            \"peptide_site\"       #>  [4] \"protein\"            \"protein_site\"       \"gene\"               #>  [7] \"glycan_composition\" \"glycan_structure\"   \"Tp\"                 #> [10] \"B\"                  \"nA\"                 \"nF\"                 #> [13] \"nFc\"                \"nFa\"                \"nG\"                 #> [16] \"nGt\"                \"nS\"                 \"nM\""},{"path":"https://glycoverse.github.io/glydet/reference/all_mp_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get All Meta-Property Functions — all_mp_fns","title":"Get All Meta-Property Functions — all_mp_fns","text":"function returns named list meta-property functions: \"Tp\": n_glycan_type(): type glycan \"B\": has_bisecting(): whether glycan bisecting GlcNAc \"nA\": n_antennae(): number antennae \"nF\": n_fuc(): number fucoses \"nFc\": n_core_fuc(): number core fucoses \"nFa\": n_arm_fuc(): number arm fucoses \"nG\": n_gal(): number galactoses \"nGt\": n_terminal_gal(): number terminal galactoses \"nS\": n_sia(): number sialic acids \"nM\": n_man(): number mannoses","code":""},{"path":"https://glycoverse.github.io/glydet/reference/all_mp_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get All Meta-Property Functions — all_mp_fns","text":"","code":"all_mp_fns()"},{"path":"https://glycoverse.github.io/glydet/reference/all_mp_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get All Meta-Property Functions — all_mp_fns","text":"named list meta-property functions.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/all_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get All Derived Traits — all_traits","title":"Get All Derived Traits — all_traits","text":"function returns named list derived traits. Compared basic_traits(), function includes derived traits detailed within conditions.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/all_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get All Derived Traits — all_traits","text":"","code":"all_traits()"},{"path":"https://glycoverse.github.io/glydet/reference/all_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get All Derived Traits — all_traits","text":"named list derived traits.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/all_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get All Derived Traits — all_traits","text":"explanations derived traits follows: A1F: Proportion fucosylated glycans within mono-antennary glycans A2F: Proportion fucosylated glycans within bi-antennary glycans A3F: Proportion fucosylated glycans within tri-antennary glycans A4F: Proportion fucosylated glycans within tetra-antennary glycans A1Fc: Proportion core-fucosylated glycans within mono-antennary glycans A2Fc: Proportion core-fucosylated glycans within bi-antennary glycans A3Fc: Proportion core-fucosylated glycans within tri-antennary glycans A4Fc: Proportion core-fucosylated glycans within tetra-antennary glycans A1Fa: Proportion arm-fucosylated glycans within mono-antennary glycans A2Fa: Proportion arm-fucosylated glycans within bi-antennary glycans A3Fa: Proportion arm-fucosylated glycans within tri-antennary glycans A4Fa: Proportion arm-fucosylated glycans within tetra-antennary glycans A1SFa: Proportion arm-fucosylated glycans within sialylated mono-antennary glycans A2SFa: Proportion arm-fucosylated glycans within sialylated bi-antennary glycans A3SFa: Proportion arm-fucosylated glycans within sialylated tri-antennary glycans A4SFa: Proportion arm-fucosylated glycans within sialylated tetra-antennary glycans A1S0Fa: Proportion arm-fucosylated glycans within asialylated mono-antennary glycans A2S0Fa: Proportion arm-fucosylated glycans within asialylated bi-antennary glycans A3S0Fa: Proportion arm-fucosylated glycans within asialylated tri-antennary glycans A4S0Fa: Proportion arm-fucosylated glycans within asialylated tetra-antennary glycans A1B: Proportion bisecting glycans within mono-antennary glycans A2B: Proportion bisecting glycans within bi-antennary glycans A3B: Proportion bisecting glycans within tri-antennary glycans A4B: Proportion bisecting glycans within tetra-antennary glycans A1FcB: Proportion bisecting glycans within core-fucosylated mono-antennary glycans A2FcB: Proportion bisecting glycans within core-fucosylated bi-antennary glycans A3FcB: Proportion bisecting glycans within core-fucosylated tri-antennary glycans A4FcB: Proportion bisecting glycans within core-fucosylated tetra-antennary glycans A1Fc0B: Proportion bisecting glycans within -core-fucosylated mono-antennary glycans A2Fc0B: Proportion bisecting glycans within -core-fucosylated bi-antennary glycans A3Fc0B: Proportion bisecting glycans within -core-fucosylated tri-antennary glycans A4Fc0B: Proportion bisecting glycans within -core-fucosylated tetra-antennary glycans A1G: Average degree galactosylation per antenna within mono-antennary glycans A2G: Average degree galactosylation per antenna within bi-antennary glycans A3G: Average degree galactosylation per antenna within tri-antennary glycans A4G: Average degree galactosylation per antenna within tetra-antennary glycans A1Gt: Average degree terminal galactose per antenna within mono-antennary glycans A2Gt: Average degree terminal galactose per antenna within bi-antennary glycans A3Gt: Average degree terminal galactose per antenna within tri-antennary glycans A4Gt: Average degree terminal galactose per antenna within tetra-antennary glycans A1S: Average degree sialylation per antenna within mono-antennary glycans A2S: Average degree sialylation per antenna within bi-antennary glycans A3S: Average degree sialylation per antenna within tri-antennary glycans A4S: Average degree sialylation per antenna within tetra-antennary glycans A1GS: Average degree sialylation per galactose within mono-antennary glycans A2GS: Average degree sialylation per galactose within bi-antennary glycans A3GS: Average degree sialylation per galactose within tri-antennary glycans A4GS: Average degree sialylation per galactose within tetra-antennary glycans","code":""},{"path":"https://glycoverse.github.io/glydet/reference/all_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get All Derived Traits — all_traits","text":"","code":"all_traits() #> $TM #> prop(Tp == \"highmannose\", na_action = \"keep\") #>  #> $TH #> prop(Tp == \"hybrid\", na_action = \"keep\") #>  #> $TC #> prop(Tp == \"complex\", na_action = \"keep\") #>  #> $MM #> wmean(nM, within = (Tp == \"highmannose\"), na_action = \"keep\") #>  #> $CA2 #> prop(nA == 2, within = (Tp == \"complex\"), na_action = \"keep\") #>  #> $CA3 #> prop(nA == 3, within = (Tp == \"complex\"), na_action = \"keep\") #>  #> $CA4 #> prop(nA == 4, within = (Tp == \"complex\"), na_action = \"keep\") #>  #> $TF #> prop(nF > 0, na_action = \"keep\") #>  #> $TFc #> prop(nFc > 0, na_action = \"keep\") #>  #> $TFa #> prop(nFa > 0, na_action = \"keep\") #>  #> $TB #> prop(B, na_action = \"keep\") #>  #> $SG #> wmean(nS/nG, na_action = \"keep\") #>  #> $GA #> wmean(nG/nA, na_action = \"keep\") #>  #> $TS #> prop(nS > 0, na_action = \"keep\") #>  #> $A1F #> prop(nF > 0, within = (nA == 1), na_action = \"keep\") #>  #> $A2F #> prop(nF > 0, within = (nA == 2), na_action = \"keep\") #>  #> $A3F #> prop(nF > 0, within = (nA == 3), na_action = \"keep\") #>  #> $A4F #> prop(nF > 0, within = (nA == 4), na_action = \"keep\") #>  #> $A1Fc #> prop(nFc > 0, within = (nA == 1), na_action = \"keep\") #>  #> $A2Fc #> prop(nFc > 0, within = (nA == 2), na_action = \"keep\") #>  #> $A3Fc #> prop(nFc > 0, within = (nA == 3), na_action = \"keep\") #>  #> $A4Fc #> prop(nFc > 0, within = (nA == 4), na_action = \"keep\") #>  #> $A1Fa #> prop(nFa > 0, within = (nA == 1), na_action = \"keep\") #>  #> $A2Fa #> prop(nFa > 0, within = (nA == 2), na_action = \"keep\") #>  #> $A3Fa #> prop(nFa > 0, within = (nA == 3), na_action = \"keep\") #>  #> $A4Fa #> prop(nFa > 0, within = (nA == 4), na_action = \"keep\") #>  #> $A1SFa #> prop(nFa > 0, within = (nA == 1 & nS > 0), na_action = \"keep\") #>  #> $A2SFa #> prop(nFa > 0, within = (nA == 2 & nS > 0), na_action = \"keep\") #>  #> $A3SFa #> prop(nFa > 0, within = (nA == 3 & nS > 0), na_action = \"keep\") #>  #> $A4SFa #> prop(nFa > 0, within = (nA == 4 & nS > 0), na_action = \"keep\") #>  #> $A1S0Fa #> prop(nFa > 0, within = (nA == 1 & nS == 0), na_action = \"keep\") #>  #> $A2S0Fa #> prop(nFa > 0, within = (nA == 2 & nS == 0), na_action = \"keep\") #>  #> $A3S0Fa #> prop(nFa > 0, within = (nA == 3 & nS == 0), na_action = \"keep\") #>  #> $A4S0Fa #> prop(nFa > 0, within = (nA == 4 & nS == 0), na_action = \"keep\") #>  #> $A1B #> prop(B, within = (nA == 1), na_action = \"keep\") #>  #> $A2B #> prop(B, within = (nA == 2), na_action = \"keep\") #>  #> $A3B #> prop(B, within = (nA == 3), na_action = \"keep\") #>  #> $A4B #> prop(B, within = (nA == 4), na_action = \"keep\") #>  #> $A1FcB #> prop(B, within = (nA == 1 & nFc > 0), na_action = \"keep\") #>  #> $A2FcB #> prop(B, within = (nA == 2 & nFc > 0), na_action = \"keep\") #>  #> $A3FcB #> prop(B, within = (nA == 3 & nFc > 0), na_action = \"keep\") #>  #> $A4FcB #> prop(B, within = (nA == 4 & nFc > 0), na_action = \"keep\") #>  #> $A1Fc0B #> prop(B, within = (nA == 1 & nFc == 0), na_action = \"keep\") #>  #> $A2Fc0B #> prop(B, within = (nA == 2 & nFc == 0), na_action = \"keep\") #>  #> $A3Fc0B #> prop(B, within = (nA == 3 & nFc == 0), na_action = \"keep\") #>  #> $A4Fc0B #> prop(B, within = (nA == 4 & nFc == 0), na_action = \"keep\") #>  #> $A1G #> wmean(nG/nA, within = (nA == 1), na_action = \"keep\") #>  #> $A2G #> wmean(nG/nA, within = (nA == 2), na_action = \"keep\") #>  #> $A3G #> wmean(nG/nA, within = (nA == 3), na_action = \"keep\") #>  #> $A4G #> wmean(nG/nA, within = (nA == 4), na_action = \"keep\") #>  #> $A1Gt #> wmean(nGt/nA, within = (nA == 1), na_action = \"keep\") #>  #> $A2Gt #> wmean(nGt/nA, within = (nA == 2), na_action = \"keep\") #>  #> $A3Gt #> wmean(nGt/nA, within = (nA == 3), na_action = \"keep\") #>  #> $A4Gt #> wmean(nGt/nA, within = (nA == 4), na_action = \"keep\") #>  #> $A1S #> wmean(nS/nA, within = (nA == 1), na_action = \"keep\") #>  #> $A2S #> wmean(nS/nA, within = (nA == 2), na_action = \"keep\") #>  #> $A3S #> wmean(nS/nA, within = (nA == 3), na_action = \"keep\") #>  #> $A4S #> wmean(nS/nA, within = (nA == 4), na_action = \"keep\") #>  #> $A1GS #> wmean(nS/nG, within = (nA == 1), na_action = \"keep\") #>  #> $A2GS #> wmean(nS/nG, within = (nA == 2), na_action = \"keep\") #>  #> $A3GS #> wmean(nS/nG, within = (nA == 3), na_action = \"keep\") #>  #> $A4GS #> wmean(nS/nG, within = (nA == 4), na_action = \"keep\") #>"},{"path":"https://glycoverse.github.io/glydet/reference/basic_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Basic Derived Traits — basic_traits","title":"Get Basic Derived Traits — basic_traits","text":"derived traits basic commonly used derived traits. describe global properties glycome including type glycans, fucosylation level, sialylation level, galactosylation level, branching level.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/basic_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Basic Derived Traits — basic_traits","text":"","code":"basic_traits()"},{"path":"https://glycoverse.github.io/glydet/reference/basic_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Basic Derived Traits — basic_traits","text":"named list derived traits.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/basic_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Basic Derived Traits — basic_traits","text":"explanations derived traits follows: TM: Proportion highmannose glycans TH: Proportion hybrid glycans TC: Proportion complex glycans MM: Average number mannoses within highmannose glycans CA2: Proportion bi-antennary glycans within complex glycans CA3: Proportion tri-antennary glycans within complex glycans CA4: Proportion tetra-antennary glycans within complex glycans TF: Proportion fucosylated glycans TFc: Proportion core-fucosylated glycans TFa: Proportion arm-fucosylated glycans TB: Proportion glycans bisecting GlcNAc SG: Average degree sialylation per galactose GA: Average degree galactosylation per antenna TS: Proportion sialylated glycans","code":""},{"path":"https://glycoverse.github.io/glydet/reference/basic_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Basic Derived Traits — basic_traits","text":"","code":"basic_traits() #> $TM #> prop(Tp == \"highmannose\", na_action = \"keep\") #>  #> $TH #> prop(Tp == \"hybrid\", na_action = \"keep\") #>  #> $TC #> prop(Tp == \"complex\", na_action = \"keep\") #>  #> $MM #> wmean(nM, within = (Tp == \"highmannose\"), na_action = \"keep\") #>  #> $CA2 #> prop(nA == 2, within = (Tp == \"complex\"), na_action = \"keep\") #>  #> $CA3 #> prop(nA == 3, within = (Tp == \"complex\"), na_action = \"keep\") #>  #> $CA4 #> prop(nA == 4, within = (Tp == \"complex\"), na_action = \"keep\") #>  #> $TF #> prop(nF > 0, na_action = \"keep\") #>  #> $TFc #> prop(nFc > 0, na_action = \"keep\") #>  #> $TFa #> prop(nFa > 0, na_action = \"keep\") #>  #> $TB #> prop(B, na_action = \"keep\") #>  #> $SG #> wmean(nS/nG, na_action = \"keep\") #>  #> $GA #> wmean(nG/nA, na_action = \"keep\") #>  #> $TS #> prop(nS > 0, na_action = \"keep\") #>"},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Derived Traits — derive_traits","title":"Calculate Derived Traits — derive_traits","text":"function calculates derived traits glyexp::experiment() object. glycomics data, calculates derived traits directly. glycoproteomics data, glycosite treated separate glycome, derived traits calculated site-specific manner.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Derived Traits — derive_traits","text":"","code":"derive_traits(exp, trait_fns = NULL, mp_fns = NULL, mp_cols = NULL)"},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Derived Traits — derive_traits","text":"exp glyexp::experiment() object. using function, preprocess data using glyclean package. glycoproteomics data, data aggregated \"gfs\" (glycoforms structures) level using glyclean::aggregate(). Also, please make sure glycan_structure column present var_info table, glycoproteomics identification softwares provide information. \"glycan_structure\" can glyrepr::glycan_structure() vector, character vector glycan structure strings supported glyparse::auto_parse(). trait_fns named list derived trait functions created trait factories. Names list names derived traits. Default NULL, means derived traits basic_traits() calculated. mp_fns named list meta-property functions. parameter useful trait functions use custom meta-properties all_mp_fns(). Default NULL, means meta-properties all_mp_fns() used. mp_cols character vector column names var_info tibble use meta-properties. names provided, used names meta-properties, otherwise column names used. Meta-properties specified mp_cols overwrite introduced mp_fns names, including built-meta-properties. Default NULL, means columns used meta-properties.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Derived Traits — derive_traits","text":"new glyexp::experiment() object derived traits. Instead \"quantification glycan glycosite sample\", new experiment() contains \"value derived trait glycosite sample\", following columns var_info table: variable: variable ID trait: derived trait name glycoproteomics data, additional columns: protein: protein ID protein_site: glycosite position protein columns var_info table (e.g. gene) retained \"many--one\" relationship glycosites (unique combinations protein, protein_site). , glycosite multiple values columns. gene common example, glycosite can associate one gene. Descriptions glycans column, glycosite can multiple glycans, thus multiple descriptions. Columns relationship glycosites dropped. worry understand logic, long know function try best preserve useful information. sample_info meta_data modified, except exp_type field meta_data set \"traitomics\" glycomics data, \"traitproteomics\" glycoproteomics data.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Derived Traits — derive_traits","text":"","code":"library(glyexp) library(glyclean) #>  #> Attaching package: ‘glyclean’ #> The following object is masked from ‘package:stats’: #>  #>     aggregate  exp <- real_experiment |>   auto_clean() |>   slice_sample_var(n = 100) #> ℹ Normalizing data (Median) #> ✔ Normalizing data (Median) [184ms] #>  #> ℹ Removing variables with >50% missing values #> ✔ Removing variables with >50% missing values [19ms] #>  #> ℹ Imputing missing values #> ℹ Sample size <= 30, using sample minimum imputation #> ℹ Imputing missing values #> ✔ Imputing missing values [24ms] #>  #> ℹ Aggregating data #> ✔ Aggregating data [1.1s] #>  #> ℹ Normalizing data again #> ✔ Normalizing data again [16ms] #>  trait_exp <- derive_traits(exp) trait_exp #>  #> ── Traitproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 896 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr>  # By default, only basic traits are calculated names(basic_traits()) #>  [1] \"TM\"  \"TH\"  \"TC\"  \"MM\"  \"CA2\" \"CA3\" \"CA4\" \"TF\"  \"TFc\" \"TFa\" \"TB\"  \"SG\"  #> [13] \"GA\"  \"TS\"   # You can calculate all traits in `all_traits()` more_trait_exp <- derive_traits(exp, trait_fns = all_traits()) more_trait_exp #>  #> ── Traitproteomics Experiment ────────────────────────────────────────────────── #> ℹ Expression matrix: 12 samples, 3968 variables #> ℹ Sample information fields: group <chr> #> ℹ Variable information fields: protein <chr>, protein_site <int>, trait <chr>, gene <chr>"},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits_.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Derived Traits from Tidy Data — derive_traits_","title":"Calculate Derived Traits from Tidy Data — derive_traits_","text":"function calculates derived traits tibble tidy format. Use function using glyexp package. glycomics data, calculates derived traits directly. glycoproteomics data, glycosite treated separate glycome, derived traits calculated site-specific manner.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Derived Traits from Tidy Data — derive_traits_","text":"","code":"derive_traits_(tbl, data_type, trait_fns = NULL, mp_fns = NULL)"},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Derived Traits from Tidy Data — derive_traits_","text":"tbl tibble tidy format, following columns: sample: sample ID glycan_structure: glycan structures, either glyrepr::glycan_structure() vector character vector glycan structure strings supported glyparse::auto_parse(). value: quantification glycan sample. glycoproteomics data, additional columns needed: protein: protein ID protein_site: glycosite position protein unique combination protein protein_site determines glycosite. columns ignored. Please make sure data properly preprocessed, including normalization, missing value handling, etc. Specifically, glycoproteomics data, please make sure data aggregated \"glycoforms structures\" level. quantification glycan structure glycosite sample. data_type Either \"glycomics\" \"glycoproteomics\". trait_fns named list derived trait functions created trait factories. Names list names derived traits. Default NULL, means derived traits basic_traits() calculated. mp_fns named list meta-property functions. parameter useful trait functions use custom meta-properties all_mp_fns(). Default NULL, means meta-properties all_mp_fns() used.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Derived Traits from Tidy Data — derive_traits_","text":"tidy tibble containing following columns: sample: sample ID trait: derived trait name value: value derived trait glycoproteomics data, additional columns: protein: protein ID protein_site: glycosite position protein columns original tibble included.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/reference/derive_traits_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Derived Traits from Tidy Data — derive_traits_","text":"","code":"# Create example tidy data library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:glyexp’: #>  #>     select_var #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(glyexp) library(tibble)  tidy_data <- as_tibble(real_experiment2)  # Calculate traits traits <- derive_traits_(tidy_data, data_type = \"glycomics\") traits #> # A tibble: 2,016 × 3 #>    trait sample  value #>    <chr> <chr>   <dbl> #>  1 TM    S1     0.0322 #>  2 TM    S2     0.0274 #>  3 TM    S3     0.0215 #>  4 TM    S4     0.0178 #>  5 TM    S5     0.0238 #>  6 TM    S6     0.0254 #>  7 TM    S7     0.0234 #>  8 TM    S8     0.0200 #>  9 TM    S9     0.0170 #> 10 TM    S10    0.0207 #> # ℹ 2,006 more rows"},{"path":"https://glycoverse.github.io/glydet/reference/explain_trait.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain a Derived Trait — explain_trait","title":"Explain a Derived Trait — explain_trait","text":"function provides human-readable English explanation derived trait represents. works trait functions created trait factories prop(), ratio(), wmean(), works best traits defined built-meta-properties.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/explain_trait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain a Derived Trait — explain_trait","text":"","code":"explain_trait(trait_fn)"},{"path":"https://glycoverse.github.io/glydet/reference/explain_trait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain a Derived Trait — explain_trait","text":"trait_fn derived trait function created one trait factories.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/explain_trait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain a Derived Trait — explain_trait","text":"character string containing concise English explanation trait.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/explain_trait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain a Derived Trait — explain_trait","text":"","code":"# Explain built-in traits explain_trait(basic_traits()$TM) #> [1] \"Proportion of high-mannose glycans among all glycans.\" explain_trait(basic_traits()$SG) #> [1] \"Abundance-weighted mean of degree of sialylation per galactose among all glycans.\"  # Explain custom traits explain_trait(prop(nFc > 0)) #> [1] \"Proportion of core-fucosylated glycans among all glycans.\" explain_trait(prop(nFc > 0, within = (T == \"complex\"))) #> [1] \"Proportion of core-fucosylated glycans within glycans satisfying 'T == \\\"complex\\\"'.\" explain_trait(ratio(T == \"complex\", T == \"hybrid\")) #> [1] \"Ratio of glycans satisfying 'T == \\\"complex\\\"' to glycans satisfying 'T == \\\"hybrid\\\"' among all glycans.\" explain_trait(wmean(nA, within = (T == \"complex\"))) #> [1] \"Abundance-weighted mean of antenna count within glycans satisfying 'T == \\\"complex\\\"'.\" explain_trait(wmean(nS / nG, within = nA == 4 & nFc > 0)) #> [1] \"Abundance-weighted mean of degree of sialylation per galactose within tetra-antennary glycans with core-fucosylation.\""},{"path":"https://glycoverse.github.io/glydet/reference/get_meta_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Meta-Properties of Glycans — get_meta_properties","title":"Get Meta-Properties of Glycans — get_meta_properties","text":"function calculates meta-properties given glycans. Meta-properties properties describing certain structural characteristics glycans. example, number antennae, number core fucoses, etc.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/get_meta_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Meta-Properties of Glycans — get_meta_properties","text":"","code":"get_meta_properties(glycans, mp_fns = NULL)"},{"path":"https://glycoverse.github.io/glydet/reference/get_meta_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Meta-Properties of Glycans — get_meta_properties","text":"glycans glyrepr::glycan_structure() vector, character vector glycan structure strings supported glyparse::auto_parse(). mp_fns named list meta-property functions. Names list names meta-properties. Default all_mp_fns(). meta-property function takes glyrepr::glycan_structure() vector, returns vector meta-property values. purrr-style lambda functions supported.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/get_meta_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Meta-Properties of Glycans — get_meta_properties","text":"tibble meta-properties. Column names names meta-properties.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/reference/get_meta_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Meta-Properties of Glycans — get_meta_properties","text":"","code":"glycans <- c(   \"Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(b1-\",   \"Fuc(a1-3)GlcNAc(b1-2)Man(a1-3)[GlcNAc(b1-2)Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(?1-\",   \"GlcNAc(b1-2)Man(a1-3)[Man(a1-6)]Man(b1-4)GlcNAc(b1-4)GlcNAc(?1-\" )  # Use default meta-property functions get_meta_properties(glycans) #> # A tibble: 3 × 10 #>   Tp           B        nA    nF   nFc   nFa    nG   nGt    nS    nM #>   <fct>        <lgl> <int> <int> <int> <int> <int> <int> <int> <int> #> 1 paucimannose FALSE     0     0     0     0     0     0     0     3 #> 2 complex      FALSE     2     1     0     1     0     0     0     3 #> 3 complex      FALSE     1     0     0     0     0     0     0     3  # Use custom meta-property functions fns <- list(   nN = ~ glyrepr::count_mono(.x, \"HexNAc\"),  # purrr-style lambda function   nH = ~ glyrepr::count_mono(.x, \"Hex\") ) get_meta_properties(glycans, fns) #> # A tibble: 3 × 2 #>      nN    nH #>   <int> <int> #> 1     2     3 #> 2     4     3 #> 3     3     3"},{"path":"https://glycoverse.github.io/glydet/reference/glydet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"glydet: Describe Glycosylation Structural Properties in a Site Specific Manner — glydet-package","title":"glydet: Describe Glycosylation Structural Properties in a Site Specific Manner — glydet-package","text":"Describe glycosylation structural properties site specific manner. field glycomics, analytical approach known derived traits. glydet provides functions calculate derived traits well-defined literature, implements domain-specific language define custom derived traits.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/reference/glydet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"glydet: Describe Glycosylation Structural Properties in a Site Specific Manner — glydet-package","text":"Maintainer: Bin Fu 23110220018@m.fudan.edu.cn (ORCID)","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine N-Glycan Key Properties — n_glycan_type","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"functions check key properties N-glycan: n_glycan_type(): Determine N-glycan type. has_bisecting(): Check glycan bisecting GlcNAc. n_antennae(): Count number antennae. n_fuc(): Count number fucoses. n_core_fuc(): Count number core fucoses. n_arm_fuc(): Count number arm fucoses. n_gal(): Count number galactoses. n_terminal_gal(): Count number terminal galactoses. n_sia(): Count number sialic acids. n_man(): Count number mannoses. functions assume glycans N-glycans without validation, thus may return meaningless values non-N-glycans. Therefore, please make sure pass N-glycans . functions put minimum requirement glycans, .e. work glycans generic monosaccharides (e.g. \"Hex\", \"HexNAc\") linkage information. type structures common glycoproteomics glycomics studies.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"","code":"n_glycan_type(glycans)  has_bisecting(glycans)  n_antennae(glycans)  n_fuc(glycans)  n_core_fuc(glycans)  n_arm_fuc(glycans)  n_gal(glycans)  n_terminal_gal(glycans)  n_sia(glycans)  n_man(glycans)"},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"glycans glyrepr::glycan_structure() vector.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"n_glycan_type(): factor vector indicating N-glycan type, either \"highmannose\", \"hybrid\", \"complex\", \"paucimannose\". has_bisecting(): logical vector indicating glycan bisecting GlcNAc. n_antennae(): integer vector indicating number antennae. n_fuc(): integer vector indicating number fucoses. n_core_fuc(): integer vector indicating number core fucoses. n_arm_fuc(): integer vector indicating number arm fucoses. n_gal(): integer vector indicating number galactoses. n_terminal_gal(): integer vector indicating number terminal galactoses. n_sia(): integer vector indicating number sialic acids. n_man(): integer vector indicating number mannoses.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-glycan-type-n-glycan-types","dir":"Reference","previous_headings":"","what":"n_glycan_type(): N-Glycan Types","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Four types N-glycans recognized: high mannose, hybrid, complex, paucimannose. information N-glycan types, see Essentials Glycobiology.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"has-bisecting-bisecting-glcnac","dir":"Reference","previous_headings":"","what":"has_bisecting(): Bisecting GlcNAc","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Bisecting GlcNAc GlcNAc residue attached core mannose N-glycans.","code":"Man         \\ GlcNAc - Man - GlcNAc - GlcNAc - ~~~~~~  /      Man"},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-antennae-number-of-antennae","dir":"Reference","previous_headings":"","what":"n_antennae(): Number of Antennae","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"number antennae number branching GlcNAc core mannoses.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-fuc-number-of-fucoses","dir":"Reference","previous_headings":"","what":"n_fuc(): Number of Fucoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Number fucoses. function assumes fucose dHex.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-core-fuc-number-of-core-fucoses","dir":"Reference","previous_headings":"","what":"n_core_fuc(): Number of Core Fucoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Core fucoses fucose residues attached core GlcNAc N-glycan.","code":"Man             Fuc  <- core fucose    \\             |     Man - GlcNAc - GlcNAc -    / Man"},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-arm-fuc-number-of-arm-fucoses","dir":"Reference","previous_headings":"","what":"n_arm_fuc(): Number of Arm Fucoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Arm focuses focuse residues attached branching GlcNAc N-glycan.","code":"Fuc  <- arm fucose   | GlcNAc - Man             \\              Man - GlcNAc - GlcNAc -             / GlcNAc - Man"},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-gal-number-of-galactoses","dir":"Reference","previous_headings":"","what":"n_gal(): Number of Galactoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"function seems useless silly. , well-structured glycan concrete monosaccharides. However, \"Hex\" \"H\" hand, tricky know many \"Gal\" many \"Man\". function makes simply assumption rightmost \"H\" \"H-H-N-H\" unit galactose. two \"H\" left mannoses N-glycan core. \"N\" GlcNAc attached one core mannose.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-terminal-gal-number-of-terminal-galactoses","dir":"Reference","previous_headings":"","what":"n_terminal_gal(): Number of Terminal Galactoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Terminal galactoses galactose residues non-reducing end without sialic acid capping.","code":"Gal - GlcNAc - Man          ~~~               \\      terminal Gal           Man - GlcNAc - GlcNAc -                            / Neu5Ac - Gal - GlcNAc - Man          ~~~    not terminal Gal"},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-sia-number-of-sialic-acids","dir":"Reference","previous_headings":"","what":"n_sia(): Number of Sialic Acids","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Number sialic acids (Neu5Ac). Neu5Gc counted.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/n_glycan_type.html","id":"n-man-number-of-mannoses","dir":"Reference","previous_headings":"","what":"n_man(): Number of Mannoses","title":"Determine N-Glycan Key Properties — n_glycan_type","text":"Number mannoses. function assumes Hex N-glycan core mannoses. Also, high-mannose paucimannose glycans, Hex mannoses. Finally, hybrid glycans, rightmost (side without branching HexNAc) mannoses.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Proportion Trait — prop","title":"Create a Proportion Trait — prop","text":"proportion trait proportion certain group glycans within larger group glycans. example, proportion sialylated glycans within glycans, proportion tetra-antennary glycans within complex glycans. type traits common type glycan derived traits. can regarded special case ratio trait (see ratio()).","code":""},{"path":"https://glycoverse.github.io/glydet/reference/prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Proportion Trait — prop","text":"","code":"prop(cond, within = NULL, na_action = \"keep\")"},{"path":"https://glycoverse.github.io/glydet/reference/prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Proportion Trait — prop","text":"cond Condition use defining smaller group. expression evaluates logical vector. names built-meta-properties (see all_mp_fns()) custom meta-properties can used expression. within Condition use defining larger group, format cond. NULL (default), glycans used larger group. na_action handle missing values. \"keep\" (default): keep missing values NA. \"zero\": set missing values 0.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Proportion Trait — prop","text":"derived trait function.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/prop.html","id":"how-to-use","dir":"Reference","previous_headings":"","what":"How to use","title":"Create a Proportion Trait — prop","text":"can use prop() create proportion trait easily. example:   Note last example uses & logical . Actually, can use logical operator expression R (e.g., |, !, etc.). want perform pre-filtering calculating proportion, example, want calculate proportion core-fucosylated glycans within complex glycans, can use within define denominator.   parentheses around condition within optional, recommended use clarity.","code":"# Proportion of core-fucosylated glycans within all glycans prop(nFc > 0)  # Proportion of complex glycans within all glycans prop(Tp == \"complex\")  # Proportion of sialylated and fucosylated glycans within all glycans prop(nS > 0 & nFc > 0) # Proportion of core-fucosylated glycans within complex glycans prop(nFc > 0, within = (Tp == \"complex\"))  # Proportion of core-fucosylated glycans with tetra-antenary complex glycans prop(nFc > 0, within = (Tp == \"complex\" & nA == 4))"},{"path":"https://glycoverse.github.io/glydet/reference/prop.html","id":"note-about-na","dir":"Reference","previous_headings":"","what":"Note about NA","title":"Create a Proportion Trait — prop","text":"internal summation operations ignore NAs default. Therefore, NAs expression matrix meta-property values result NAs derived traits. However, derived traits calculate ratio two values, NAs introduced : denominator 0. can happen within condition selects glycans. numerator denominator 0.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Proportion Trait — prop","text":"","code":"# Proportion of core-fucosylated glycans within all glycans prop(nFc > 0) #> prop(nFc > 0, na_action = \"keep\")  # Proportion of bisecting glycans within all glycans prop(B) #> prop(B, na_action = \"keep\")  # Proportion of sialylated and arm-fucosylated glycans within all glycans prop(nS > 0 & nFa > 0) #> prop(nS > 0 & nFa > 0, na_action = \"keep\")  # Proportion of bi-antennary glycans within complex glycans prop(nA == 2, within = (Tp == \"complex\")) #> prop(nA == 2, within = (Tp == \"complex\"), na_action = \"keep\")  # Proportion of sialylated glycans within core-fucosylated tetra-antennary glycans prop(nS > 0, within = (nFc > 0 & nA == 4)) #> prop(nS > 0, within = (nFc > 0 & nA == 4), na_action = \"keep\")"},{"path":"https://glycoverse.github.io/glydet/reference/ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Ratio Trait — ratio","title":"Create a Ratio Trait — ratio","text":"ratio trait ratio total abundance two groups glycans. example, ratio complex glycans hybrid glycans, ratio bisecting unbisecting glycans.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Ratio Trait — ratio","text":"","code":"ratio(num_cond, denom_cond, within = NULL, na_action = \"keep\")"},{"path":"https://glycoverse.github.io/glydet/reference/ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Ratio Trait — ratio","text":"num_cond Condition use defining numerator. expression evaluates logical vector. names built-meta-properties (see all_mp_fns()) custom meta-properties can used expression. denom_cond Condition use defining denominator. format num_cond. within Condition set restriction glycans. format num_cond. na_action handle missing values. \"keep\" (default): keep missing values NA. \"zero\": set missing values 0.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Ratio Trait — ratio","text":"derived trait function.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/ratio.html","id":"how-to-use","dir":"Reference","previous_headings":"","what":"How to use","title":"Create a Ratio Trait — ratio","text":"can use ratio() create ratio trait easily. example:   Note last example uses & logical . Actually, can use logical operator expression R (e.g., |, !, etc.). prop() special case ratio(), .e., prop(cond, within) equivalent ratio(cond & within, within). recommend using prop() instead ratio() clarity possible.","code":"# Ratio of complex glycans and hybrid glycans ratio(Tp == \"complex\", Tp == \"hybrid\")  # Ratio of bisecting and unbisecting glycans ratio(B, !B)  # Ratio of core-fucosylated and non-core-fucosylated glycans within complex glycans ratio(nFc > 0 & Tp == \"complex\", nFc == 0 & Tp == \"complex\")  # The above example can be simplified as: ratio(nFc > 0, nFc == 0, within = (Tp == \"complex\"))  # more readable"},{"path":"https://glycoverse.github.io/glydet/reference/ratio.html","id":"note-about-na","dir":"Reference","previous_headings":"","what":"Note about NA","title":"Create a Ratio Trait — ratio","text":"internal summation operations ignore NAs default. Therefore, NAs expression matrix meta-property values result NAs derived traits. However, derived traits calculate ratio two values, NAs introduced : denominator 0. can happen within condition selects glycans. numerator denominator 0.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Ratio Trait — ratio","text":"","code":"# Ratio of complex glycans and hybrid glycans ratio(Tp == \"complex\", Tp == \"hybrid\") #> ratio(Tp == \"complex\", Tp == \"hybrid\", na_action = \"keep\")  # Ratio of bisecting and unbisecting glycans within bi-antennary glycans ratio(B, !B, within = (nA == 2)) #> ratio(B, !B, within = (nA == 2), na_action = \"keep\")"},{"path":"https://glycoverse.github.io/glydet/reference/wmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Weighted-Mean Trait — wmean","title":"Create a Weighted-Mean Trait — wmean","text":"weighted-mean trait average value quantitative property within group glycans, weighted abundance glycans. example, average number antennae within complex glycans, average number sialic acids within glycans.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/wmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Weighted-Mean Trait — wmean","text":"","code":"wmean(val_cond, within = NULL, na_action = \"keep\")"},{"path":"https://glycoverse.github.io/glydet/reference/wmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Weighted-Mean Trait — wmean","text":"val_cond Condition use defining value. expression evaluates numeric vector. names built-meta-properties (see all_mp_fns()) custom meta-properties can used expression. within Condition set restriction glycans. format val_cond. na_action handle missing values. \"keep\" (default): keep missing values NA. \"zero\": set missing values 0.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/wmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Weighted-Mean Trait — wmean","text":"derived trait function.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/wmean.html","id":"how-to-use","dir":"Reference","previous_headings":"","what":"How to use","title":"Create a Weighted-Mean Trait — wmean","text":"can use wmean() create weighted-mean trait easily. example:   Note last example uses / division. Actually, can use arithmetic operator expression R (e.g., *, +, -, etc.). want perform pre-filtering calculating weighted-mean, example, want calculate average degree sialylation per antenna within complex glycans, can use within define restriction.","code":"# Weighted mean of the number of sialic acids within all glycans wmean(nS)  # Average degree of sialylation per antenna within all glycans wmean(nS / nA) # Average number of antennae within complex glycans wmean(nA, within = (Tp == \"complex\"))"},{"path":"https://glycoverse.github.io/glydet/reference/wmean.html","id":"note-about-na","dir":"Reference","previous_headings":"","what":"Note about NA","title":"Create a Weighted-Mean Trait — wmean","text":"internal summation operations ignore NAs default. Therefore, NAs expression matrix meta-property values result NAs derived traits. However, derived traits calculate ratio two values, NAs introduced : denominator 0. can happen within condition selects glycans. numerator denominator 0.","code":""},{"path":"https://glycoverse.github.io/glydet/reference/wmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Weighted-Mean Trait — wmean","text":"","code":"# Weighted mean of the number of sialic acids within all glycans wmean(nS) #> wmean(nS, na_action = \"keep\")  # Average degree of sialylation per antenna within all glycans wmean(nS / nA) #> wmean(nS/nA, na_action = \"keep\")  # Average number of antennae within complex glycans wmean(nA, within = (Tp == \"complex\")) #> wmean(nA, within = (Tp == \"complex\"), na_action = \"keep\")"},{"path":[]},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"glydet 0.5.0","text":"meta-property T renamed Tp, avoid confusion R alias T TRUE.","code":""},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glydet 0.5.0","text":"Add mp_cols parameter derive_traits() new way define custom meta-properties.","code":""},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"minor-improvements-and-bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glydet 0.5.0","text":"derive_traits() derive_traits_() now separate documentations. Update “Defining Custom Traits” vignette include newly added mp_cols parameter. Better error message custom derived traits use undefined meta-properties. Add section NAs can appear documentations prop(), ratio(), wmean().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"minor-improvements-and-bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glydet 0.4.1","text":"Add another example “Defining Custom Traits” vignette. Use smaller datasets examples reduce build time.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"glydet 0.4.0","text":"old all_traits() renamed basic_traits(). new all_traits() added, includes advanced derived traits detailed within conditions. derive_traits() now uses basic_traits() default. derive_traits() now returns glyexp::experiment() object “traitomics” type glycomics data, “traitproteomics” type glycoproteomics data, instead “traitomics” input.","code":""},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"minor-improvements-and-bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glydet 0.4.0","text":"Introduce new all_traits() Get Started vignette. Add examples functions.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"minor-improvements-and-bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glydet 0.3.1","text":"Add missForest Suggests field DESCRIPTION. package used vignettes impute missing values glycomics data.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glydet 0.3.0","text":"Trait functions created prop(), ratio(), wmean() can printed nicely console. Add explain_trait() provide human-readable explanation trait definitions. Add nF built-meta-property count number fucoses. TF trait redefined prop(nF > 0).","code":""},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"minor-improvements-and-bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glydet 0.3.0","text":"Emphasize documentation derive_traits() derive_traits_() “glycan_structure” column can either glyrepr::glycan_structure() vector character vector glycan structure strings supported glyparse::auto_parse(). derive_traits() derive_traits_() now raise error trait_fns parameter named list. derive_traits() derive_traits_() now raise error trait_fns parameter empty list. “Working Glycomics Data” section added “Get Started” vignette. “Validating Trait Definitions” section added “Defining Custom Traits” vignette.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glydet 0.2.0","text":"derive_traits() add_meta_properties() now validates struc_col column exists. Add overwrite parameter add_meta_properties() deal existing trait columns.","code":""},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glydet 0.2.0","text":"Fix serious bug derive_traits(), row names expression matrix set correctly glycomics data. Fix typos documentations.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"minor-improvements-and-bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glydet 0.1.1","text":"Update dependencies depend release versions glycoverse packages.","code":""},{"path":"https://glycoverse.github.io/glydet/news/index.html","id":"glydet-010","dir":"Changelog","previous_headings":"","what":"glydet 0.1.0","title":"glydet 0.1.0","text":"First release.","code":""}]
